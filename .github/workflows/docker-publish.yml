name: Docker Publish

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'any-listen'

env:
  DOCKERHUB_REPO: lyswhut/any-listen-web-server
  # GHCR_REPO: ghcr.io/any-listen/any-listen-web-server
  IS_CI: true

# https://docs.docker.com/build/ci/github-actions/multi-platform/#distribute-build-across-multiple-runners

jobs:
  CheckTag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.check_tag.outputs.tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Check if submodule latest commit has a tag
      id: check_tag
      run: |
        cd any-listen
        latest_commit=$(git log -1 --format=%H)
        tag=$(git tag --contains $latest_commit)

        if [ -z "$tag" ]; then
          echo "No tag found for the latest commit in the submodule."
          echo "tag=" >> $GITHUB_OUTPUT
        else
          echo "Tag found for the latest commit: $tag"
          if [[ "$tag" == webserver-* ]]; then
            echo "Tag found for the latest commit: $tag, commit: $latest_commit"
            tag_formated=$(echo "$tag" | sed 's/^webserver-v\?//')
            echo "tag=$tag_formated" >> $GITHUB_OUTPUT
          else
            echo "Tag does not start with 'webserver-v', skipping build."
            echo "tag=" >> $GITHUB_OUTPUT
          fi
        fi

  build:
    needs: CheckTag
    runs-on: ubuntu-latest
    if: needs.CheckTag.outputs.tag != ''
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Get git commit info
        run: |
          cd any-listen
          GIT_COMMIT_ID=$(git log -1 --pretty=format:"%H")
          GIT_COMMIT_DATE=$(git log -1 --pretty=format:"%ad" --date=iso-strict)
          echo "GIT_COMMIT_ID=$GIT_COMMIT_ID" >> $GITHUB_ENV
          echo "GIT_COMMIT_DATE=$GIT_COMMIT_DATE" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_REPO }}
          # ${{ env.GHCR_REPO }}
          tags: |
            type=raw,value=${{ needs.CheckTag.outputs.tag }}
            type=raw,value=latest

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # - name: Login to GHCR
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.repository_owner }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./any-listen
          file: ./any-listen/Dockerfile
          build-args: |
            IS_CI=${{ env.IS_CI }}
            GIT_COMMIT_ID=${{ env.GIT_COMMIT_ID }}
            GIT_COMMIT_DATE=${{ env.GIT_COMMIT_DATE }}
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,"name=${{ env.DOCKERHUB_REPO }}",push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  buildArmv7l:
    needs: CheckTag
    runs-on: ubuntu-latest
    if: needs.CheckTag.outputs.tag != ''
    env:
      platform: linux/arm/v7
    steps:
      - name: Prepare
        run: |
          platform=${{ env.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Get git commit info
        run: |
          cd any-listen
          GIT_COMMIT_ID=$(git log -1 --pretty=format:"%H")
          GIT_COMMIT_DATE=$(git log -1 --pretty=format:"%ad" --date=iso-strict)
          echo "GIT_COMMIT_ID=$GIT_COMMIT_ID" >> $GITHUB_ENV
          echo "GIT_COMMIT_DATE=$GIT_COMMIT_DATE" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_REPO }}
          tags: |
            type=raw,value=${{ needs.CheckTag.outputs.tag }}
            type=raw,value=latest

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # - name: Login to GHCR
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.repository_owner }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./any-listen
          file: ./any-listen/Dockerfile.lts-slim
          build-args: |
            IS_CI=${{ env.IS_CI }}
            GIT_COMMIT_ID=${{ env.GIT_COMMIT_ID }}
            GIT_COMMIT_DATE=${{ env.GIT_COMMIT_DATE }}
          platforms: ${{ env.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,"name=${{ env.DOCKERHUB_REPO }}",push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - CheckTag
      - build
      - buildArmv7l
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # - name: Login to GHCR
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.repository_owner }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_REPO }}
          # ${{ env.GHCR_REPO }}
          tags: |
            type=raw,value=${{ needs.CheckTag.outputs.tag }}
            type=raw,value=latest

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKERHUB_REPO }}@sha256:%s ' *)
        # docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
        #   $(printf '${{ env.GHCR_REPO }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.DOCKERHUB_REPO }}:${{ steps.meta.outputs.version }}
        # docker buildx imagetools inspect ${{ env.GHCR_REPO }}:${{ steps.meta.outputs.version }}

  # Linux:
  #   needs: CheckTag
  #   name: Publish
  #   runs-on: ubuntu-latest
  #   if: needs.CheckTag.outputs.tag != ''
  #   steps:
  #     - name: Check out git repository
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: 'true'

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     # Workaround: https://github.com/docker/build-push-action/issues/461
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     # Extract metadata (tags, labels) for Docker
  #     # https://github.com/docker/metadata-action
  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         tags: |
  #           type=raw,value=${{ needs.CheckTag.outputs.tag }}
  #           type=raw,value=latest

  #     # Login to Docker Hub
  #     # https://github.com/docker/login-action
  #     - name: Log into registry ${{ env.REGISTRY }}
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ secrets.DOCKER_HUB_USER }}
  #         password: ${{ secrets.DOCKER_HUB_TOKEN }}

  #     # Build and push Docker image with Buildx (don't push on PR)
  #     # https://github.com/docker/build-push-action
  #     - name: Build and push Docker image
  #       id: build-and-push
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: ./any-listen
  #         file: ./any-listen/Dockerfile
  #         platforms: linux/amd64,linux/arm64
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}

  # Linux-Armv7l:
  #   needs: CheckTag
  #   name: Publish
  #   runs-on: ubuntu-latest
  #   if: needs.CheckTag.outputs.tag != ''
  #   steps:
  #     - name: Check out git repository
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: 'true'

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     # Workaround: https://github.com/docker/build-push-action/issues/461
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     # Extract metadata (tags, labels) for Docker
  #     # https://github.com/docker/metadata-action
  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         tags: |
  #           type=raw,value=${{ needs.CheckTag.outputs.tag }}
  #           type=raw,value=latest

  #     # Login to Docker Hub
  #     # https://github.com/docker/login-action
  #     - name: Log into registry ${{ env.REGISTRY }}
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ secrets.DOCKER_HUB_USER }}
  #         password: ${{ secrets.DOCKER_HUB_TOKEN }}

  #     # Build and push Docker image with Buildx (don't push on PR)
  #     # https://github.com/docker/build-push-action
  #     - name: Build and push Docker image
  #       id: build-and-push
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: ./any-listen
  #         file: ./any-listen/Dockerfile.armv7l
  #         platforms: linux/arm/v7
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
